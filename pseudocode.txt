Sort SAM file: 
- Samtools
- sort before feeding SAM file into algorithm



ALGORITHM:

```Reference Based PCR Duplicate Removal tool. Given a SAM file of uniquely
 mapped reads, remove all PCR duplicates (retain only a single copy of each
 read).```

import argparse

def cigar_conversion(str) -> int:
    '''Adjust the starting position when there is soft-clipping'''
    return alignment_start
    input: CIGAR string: "2S12M"
    output: adjusted starting pos: 111   (original pos: 113)


with open(STL96.txt, "r") as fh:
    UMIs = []
    generate a list with 96 known UMIs (append to UMIs)


out_line = ""
out_rname = ""
out_umi = ""
out_strand = ""
out_alignment_start = ""

with open (sam file, "r") as in, open(output file, "w") as out:
    while TRUE: 
        curr_line = in.readline().strip().split()

        if curr_line.startswith('@'): 
            write curr_line to the output file
            continue

        if curr_line = "":
            # EOF 
            break

        curr_rname = SAM col 3
        curr_umi = ""
        curr_strand = ""
        curr_ alignment_start = ""

        umi = SAM col 1
        pos = SAM col 4
        flag = int(SAM col 2)
        cigar = SAM col 6

       
        # check to see if the read is unmapped 
        if((flag & 4) == 4): 
            continue


        # check to see if umi is in known UMIs list
        if umi not in UMIs: 
            continue
        else: 
            curr_umi = umi

        # check to see if the read is on the + or - strand
        if((flag & 16) == 16): 
            strand = "-"
        else: 
            strand = "+"

       # check to see if there is soft-clipping. If there is soft-clipping use the function
       to adjust the left most start position and use that as alignment_start. If there is 
       no soft-clipping use pos as the alignment_start. 
        if cigar has 'S' (soft-clipping): 
            alignment_start = cigar_conversion(cigar)
        else: 
            alignment_start = pos


        if out and curr are the same: 
            continue

        if out and curr are different: 
            write out (out_line) to output file
            replace out variables with curr 
            reset curr variables to ""
            * continue the loop *



        






